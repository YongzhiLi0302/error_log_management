{"ast":null,"code":"// ag-grid-enterprise v21.2.1\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar richSelectRow_1 = require(\"./richSelectRow\");\n\nvar virtualList_1 = require(\"../virtualList\");\n\nvar RichSelectCellEditor =\n/** @class */\nfunction (_super) {\n  __extends(RichSelectCellEditor, _super);\n\n  function RichSelectCellEditor() {\n    var _this = _super.call(this, RichSelectCellEditor.TEMPLATE) || this;\n\n    _this.selectionConfirmed = false;\n    _this.searchString = '';\n    return _this;\n  }\n\n  RichSelectCellEditor.prototype.init = function (params) {\n    this.params = params;\n    this.selectedValue = params.value;\n    this.originalSelectedValue = params.value;\n    this.focusAfterAttached = params.cellStartedEdit;\n    this.eValue.appendChild(ag_grid_community_1._.createIconNoSpan('smallDown', this.gridOptionsWrapper));\n    this.virtualList = new virtualList_1.VirtualList();\n    this.getContext().wireBean(this.virtualList);\n    this.virtualList.setComponentCreator(this.createRowComponent.bind(this));\n    this.eList.appendChild(this.virtualList.getGui());\n\n    if (ag_grid_community_1._.exists(this.params.cellHeight)) {\n      this.virtualList.setRowHeight(this.params.cellHeight);\n    }\n\n    this.renderSelectedValue();\n\n    if (ag_grid_community_1._.missing(params.values)) {\n      console.warn('ag-Grid: richSelectCellEditor requires values for it to work');\n      return;\n    }\n\n    var values = params.values;\n    this.virtualList.setModel({\n      getRowCount: function () {\n        return values.length;\n      },\n      getRow: function (index) {\n        return values[index];\n      }\n    });\n    this.addGuiEventListener('keydown', this.onKeyDown.bind(this));\n    var virtualListGui = this.virtualList.getGui();\n    this.addDestroyableEventListener(virtualListGui, 'click', this.onClick.bind(this));\n    this.addDestroyableEventListener(virtualListGui, 'mousemove', this.onMouseMove.bind(this));\n    this.clearSearchString = ag_grid_community_1._.debounce(this.clearSearchString, 300);\n\n    if (ag_grid_community_1._.exists(params.charPress)) {\n      this.searchText(params.charPress);\n    }\n  };\n\n  RichSelectCellEditor.prototype.onKeyDown = function (event) {\n    var key = event.which || event.keyCode;\n\n    switch (key) {\n      case ag_grid_community_1.Constants.KEY_ENTER:\n        this.onEnterKeyDown();\n        break;\n\n      case ag_grid_community_1.Constants.KEY_DOWN:\n      case ag_grid_community_1.Constants.KEY_UP:\n        this.onNavigationKeyPressed(event, key);\n        break;\n\n      default:\n        this.searchText(event);\n    }\n  };\n\n  RichSelectCellEditor.prototype.onEnterKeyDown = function () {\n    this.selectionConfirmed = true;\n    this.params.stopEditing();\n  };\n\n  RichSelectCellEditor.prototype.onNavigationKeyPressed = function (event, key) {\n    // if we don't stop propagation, then the grids navigation kicks in\n    event.stopPropagation();\n    var oldIndex = this.params.values.indexOf(this.selectedValue);\n    var newIndex = key === ag_grid_community_1.Constants.KEY_UP ? oldIndex - 1 : oldIndex + 1;\n\n    if (newIndex >= 0 && newIndex < this.params.values.length) {\n      var valueToSelect = this.params.values[newIndex];\n      this.setSelectedValue(valueToSelect);\n    }\n  };\n\n  RichSelectCellEditor.prototype.searchText = function (key) {\n    if (typeof key !== 'string') {\n      if (!ag_grid_community_1._.isCharacterKey(key)) {\n        return;\n      }\n\n      key = key.key;\n    }\n\n    this.searchString += key;\n    this.runSearch();\n    this.clearSearchString();\n  };\n\n  RichSelectCellEditor.prototype.runSearch = function () {\n    var suggestions = ag_grid_community_1._.fuzzySuggestions(this.searchString, this.params.values, true, true);\n\n    if (!suggestions.length) {\n      return;\n    }\n\n    this.setSelectedValue(suggestions[0]);\n  };\n\n  RichSelectCellEditor.prototype.clearSearchString = function () {\n    this.searchString = '';\n  };\n\n  RichSelectCellEditor.prototype.renderSelectedValue = function () {\n    var _this = this;\n\n    var valueFormatted = this.params.formatValue(this.selectedValue);\n    var eValue = this.eValue;\n    var params = {\n      value: this.selectedValue,\n      valueFormatted: valueFormatted,\n      api: this.gridOptionsWrapper.getApi()\n    };\n    var promise = this.userComponentFactory.newCellRenderer(this.params, params);\n\n    if (promise != null) {\n      ag_grid_community_1._.bindCellRendererToHtmlElement(promise, eValue);\n    } else {\n      eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n    }\n\n    if (promise) {\n      promise.then(function (renderer) {\n        if (renderer && renderer.destroy) {\n          _this.addDestroyFunc(function () {\n            return renderer.destroy();\n          });\n        }\n      });\n    } else {\n      if (ag_grid_community_1._.exists(this.selectedValue)) {\n        eValue.innerHTML = valueFormatted;\n      } else {\n        ag_grid_community_1._.clearElement(eValue);\n      }\n    }\n  };\n\n  RichSelectCellEditor.prototype.setSelectedValue = function (value) {\n    if (this.selectedValue === value) {\n      return;\n    }\n\n    var index = this.params.values.indexOf(value);\n\n    if (index >= 0) {\n      this.selectedValue = value;\n      this.virtualList.ensureIndexVisible(index);\n      this.virtualList.refresh();\n    }\n  };\n\n  RichSelectCellEditor.prototype.createRowComponent = function (value) {\n    var valueFormatted = this.params.formatValue(value);\n    var row = new richSelectRow_1.RichSelectRow(this.params);\n    this.getContext().wireBean(row);\n    row.setState(value, valueFormatted, value === this.selectedValue);\n    return row;\n  };\n\n  RichSelectCellEditor.prototype.onMouseMove = function (mouseEvent) {\n    var rect = this.virtualList.getGui().getBoundingClientRect();\n    var scrollTop = this.virtualList.getScrollTop();\n    var mouseY = mouseEvent.clientY - rect.top + scrollTop;\n    var row = Math.floor(mouseY / this.virtualList.getRowHeight());\n    var value = this.params.values[row]; // not using utils.exist() as want empty string test to pass\n\n    if (value !== undefined) {\n      this.setSelectedValue(value);\n    }\n  };\n\n  RichSelectCellEditor.prototype.onClick = function () {\n    this.selectionConfirmed = true;\n    this.params.stopEditing();\n  }; // we need to have the gui attached before we can draw the virtual rows, as the\n  // virtual row logic needs info about the gui state\n\n\n  RichSelectCellEditor.prototype.afterGuiAttached = function () {\n    var selectedIndex = this.params.values.indexOf(this.selectedValue); // we have to call this here to get the list to have the right height, ie\n    // otherwise it would not have scrolls yet and ensureIndexVisible would do nothing\n\n    this.virtualList.refresh();\n\n    if (selectedIndex >= 0) {\n      this.virtualList.ensureIndexVisible(selectedIndex);\n    } // we call refresh again, as the list could of moved, and we need to render the new rows\n\n\n    this.virtualList.refresh();\n\n    if (this.focusAfterAttached) {\n      this.getGui().focus();\n    }\n  };\n\n  RichSelectCellEditor.prototype.getValue = function () {\n    // NOTE: we don't use valueParser for Set Filter. The user should provide values that are to be\n    // set into the data. valueParser only really makese sense when the user is typing in text (not picking\n    // form a set).\n    return this.selectionConfirmed ? this.selectedValue : this.originalSelectedValue;\n  }; // tab index is needed so we can focus, which is needed for keyboard events\n\n\n  RichSelectCellEditor.TEMPLATE = \"<div class=\\\"ag-rich-select\\\" tabindex=\\\"0\\\">\\n            <div ref=\\\"eValue\\\" class=\\\"ag-rich-select-value\\\"></div>\\n            <div ref=\\\"eList\\\" class=\\\"ag-rich-select-list\\\"></div>\\n        </div>\";\n\n  __decorate([ag_grid_community_1.Autowired('userComponentFactory'), __metadata(\"design:type\", ag_grid_community_1.UserComponentFactory)], RichSelectCellEditor.prototype, \"userComponentFactory\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", ag_grid_community_1.GridOptionsWrapper)], RichSelectCellEditor.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([ag_grid_community_1.RefSelector('eValue'), __metadata(\"design:type\", HTMLElement)], RichSelectCellEditor.prototype, \"eValue\", void 0);\n\n  __decorate([ag_grid_community_1.RefSelector('eList'), __metadata(\"design:type\", HTMLElement)], RichSelectCellEditor.prototype, \"eList\", void 0);\n\n  return RichSelectCellEditor;\n}(ag_grid_community_1.PopupComponent);\n\nexports.RichSelectCellEditor = RichSelectCellEditor;","map":null,"metadata":{},"sourceType":"script"}