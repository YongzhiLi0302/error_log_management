"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _Collapse = _interopRequireDefault(require("../src/Collapse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

describe('<Collapse>', function () {
  var Component, wrapper;
  beforeEach(function () {
    Component =
    /*#__PURE__*/
    function (_React$Component) {
      _inherits(Component, _React$Component);

      function Component() {
        _classCallCheck(this, Component);

        return _possibleConstructorReturn(this, _getPrototypeOf(Component).apply(this, arguments));
      }

      _createClass(Component, [{
        key: "render",
        value: function render() {
          var _this = this;

          var _this$props = this.props,
              children = _this$props.children,
              props = _objectWithoutProperties(_this$props, ["children"]);

          return _react.default.createElement(_Collapse.default, _extends({
            ref: function ref(r) {
              return _this.collapse = r;
            },
            getDimensionValue: function getDimensionValue() {
              return 15;
            }
          }, props, this.state), _react.default.createElement("div", null, _react.default.createElement("div", {
            ref: "panel"
          }, children)));
        }
      }]);

      return Component;
    }(_react.default.Component);
  });
  it('Should default to collapsed', function () {
    wrapper = (0, _enzyme.mount)(_react.default.createElement(Component, null, "Panel content"));
    assert.ok(wrapper.find('Collapse').props().in === false);
  });
  it('Should have collapse class', function () {
    (0, _enzyme.mount)(_react.default.createElement(Component, null, "Panel content")).assertSingle('.collapse');
  });
  describe('from collapsed to expanded', function () {
    beforeEach(function () {
      wrapper = (0, _enzyme.mount)(_react.default.createElement(Component, null, "Panel content")); // since scrollHeight is gonna be 0 detached from the DOM

      sinon.stub(wrapper.instance().collapse, '_getScrollDimensionValue').returns('15px');
    });
    it('Should have collapsing class', function () {
      wrapper.setState({
        in: true
      });
      assert.equal(wrapper.getDOMNode().className, 'collapsing');
    });
    it('Should set initial 0px height', function (done) {
      var node = wrapper.getDOMNode();

      function onEnter() {
        assert.equal(node.style.height, '0px');
        done();
      }

      assert.equal(node.style.height, '');
      wrapper.setState({
        in: true,
        onEnter: onEnter
      });
    });
    it('Should set node to height', function () {
      var node = wrapper.getDOMNode();
      assert.equal(node.style.height, '');
      wrapper.setState({
        in: true
      });
      assert.equal(node.style.height, '15px');
    });
    it('Should transition from collapsing to not collapsing', function (done) {
      var node = wrapper.getDOMNode();

      function onEntered() {
        assert.equal(node.className, 'collapse show');
        done();
      }

      wrapper.setState({
        in: true,
        onEntered: onEntered
      });
      assert.equal(node.className, 'collapsing');
    });
    it('Should clear height after transition complete', function (done) {
      var node = wrapper.getDOMNode();

      function onEntered() {
        assert.equal(node.style.height, '');
        done();
      }

      assert.equal(node.style.height, '');
      wrapper.setState({
        in: true,
        onEntered: onEntered
      });
      assert.equal(node.style.height, '15px');
    });
  });
  describe('from expanded to collapsed', function () {
    beforeEach(function () {
      wrapper = (0, _enzyme.mount)(_react.default.createElement(Component, {
        in: true
      }, "Panel content"));
    });
    it('Should have collapsing class', function () {
      wrapper.setState({
        in: false
      });
      var node = wrapper.getDOMNode();
      assert.equal(node.className, 'collapsing');
    });
    it('Should set initial height', function () {
      var node = wrapper.getDOMNode();

      function onExit() {
        assert.equal(node.style.height, '15px');
      }

      assert.equal(node.style.height, '');
      wrapper.setState({
        in: false,
        onExit: onExit
      });
    });
    it('Should set node to height', function () {
      var node = wrapper.getDOMNode();
      assert.equal(node.style.height, '');
      wrapper.setState({
        in: false
      });
      assert.equal(node.style.height, '0px');
    });
    it('Should transition from collapsing to not collapsing', function (done) {
      var node = wrapper.getDOMNode();

      function onExited() {
        assert.equal(node.className, 'collapse');
        done();
      }

      wrapper.setState({
        in: false,
        onExited: onExited
      });
      assert.equal(node.className, 'collapsing');
    });
    it('Should have 0px height after transition complete', function (done) {
      var node = wrapper.getDOMNode();

      function onExited() {
        assert.ok(node.style.height === '0px');
        done();
      }

      assert.equal(node.style.height, '');
      wrapper.setState({
        in: false,
        onExited: onExited
      });
    });
  });
  describe('expanded', function () {
    it('Should have collapse and in class', function () {
      (0, _enzyme.mount)(_react.default.createElement(Component, {
        in: true
      }, "Panel content")).assertSingle('.collapse.show');
    });
  });
  describe('dimension', function () {
    beforeEach(function () {
      wrapper = (0, _enzyme.mount)(_react.default.createElement(Component, null, "Panel content"));
    });
    it('Defaults to height', function () {
      assert.equal(wrapper.instance().collapse.getDimension(), 'height');
    });
    it('Uses getCollapsibleDimension if exists', function () {
      function dimension() {
        return 'whatevs';
      }

      wrapper.setState({
        dimension: dimension
      });
      assert.equal(wrapper.instance().collapse.getDimension(), 'whatevs');
    });
  });
  describe('with a role', function () {
    beforeEach(function () {
      wrapper = (0, _enzyme.mount)(_react.default.createElement(Component, {
        role: "note"
      }, "Panel content"));
    });
    it('sets aria-expanded true when expanded', function () {
      var node = wrapper.getDOMNode();
      wrapper.setState({
        in: true
      });
      assert.equal(node.getAttribute('aria-expanded'), 'true');
    });
    it('sets aria-expanded false when collapsed', function () {
      var node = wrapper.getDOMNode();
      wrapper.setState({
        in: false
      });
      assert.equal(node.getAttribute('aria-expanded'), 'false');
    });
  });
});

//# sourceMappingURL=CollapseSpec.js.map