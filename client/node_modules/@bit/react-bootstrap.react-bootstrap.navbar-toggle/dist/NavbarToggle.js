"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _propTypesExtra = require("prop-types-extra");

var _ThemeProvider = require("./ThemeProvider");

var _NavbarContext = _interopRequireDefault(require("./NavbarContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NavbarToggle =
/*#__PURE__*/
function (_React$Component) {
  _inherits(NavbarToggle, _React$Component);

  function NavbarToggle() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, NavbarToggle);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NavbarToggle)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (e) {
      var onClick = _this.props.onClick;
      var onToggle = _this.navbarContext.onToggle;
      if (onClick) onClick(e);
      if (onToggle) onToggle();
    });

    return _this;
  }

  _createClass(NavbarToggle, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          bsPrefix = _this$props.bsPrefix,
          className = _this$props.className,
          children = _this$props.children,
          label = _this$props.label,
          Component = _this$props.as,
          props = _objectWithoutProperties(_this$props, ["bsPrefix", "className", "children", "label", "as"]);

      if (Component === 'button') {
        props.type = 'button';
      }

      return _react.default.createElement(_NavbarContext.default.Consumer, null, function (context) {
        _this2.navbarContext = context || {};
        return _react.default.createElement(Component, _extends({}, props, {
          onClick: _this2.handleClick,
          "aria-label": label,
          className: (0, _classnames.default)(className, bsPrefix, !!(context && context.expanded) && 'collapsed')
        }), children || _react.default.createElement("span", {
          className: "".concat(bsPrefix, "-icon")
        }));
      });
    }
  }]);

  return NavbarToggle;
}(_react.default.Component);

_defineProperty(NavbarToggle, "propTypes", {
  /** @default 'navbar-toggler' */
  bsPrefix: _propTypes.default.string,

  /** An accessible ARIA label for the toggler button. */
  label: _propTypes.default.string,

  /** @private */
  onClick: _propTypes.default.func,

  /**
   * The toggle content. When empty, the default toggle will be rendered.
   */
  children: _propTypes.default.node,
  as: _propTypesExtra.elementType
});

_defineProperty(NavbarToggle, "defaultProps", {
  label: 'Toggle navigation',
  as: 'button'
});

var _default = (0, _ThemeProvider.createBootstrapComponent)(NavbarToggle, 'navbar-toggler');

exports.default = _default;

//# sourceMappingURL=NavbarToggle.js.map