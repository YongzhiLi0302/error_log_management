{"ast":null,"code":"// ag-grid-enterprise v21.2.1\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar abstractSelectionHandle_1 = require(\"./abstractSelectionHandle\");\n\nvar RangeHandle =\n/** @class */\nfunction (_super) {\n  __extends(RangeHandle, _super);\n\n  function RangeHandle() {\n    var _this = _super.call(this, RangeHandle.TEMPLATE) || this;\n\n    _this.type = 'range';\n    _this.rangeFixed = false;\n    return _this;\n  }\n\n  RangeHandle.prototype.onDrag = function (e) {\n    var lastCellHovered = this.getLastCellHovered();\n\n    if (!lastCellHovered) {\n      return;\n    }\n\n    var cellRanges = this.rangeController.getCellRanges();\n\n    var lastRange = ag_grid_community_1._.last(cellRanges);\n\n    if (!this.rangeFixed) {\n      this.fixRangeStartEnd(lastRange);\n      this.rangeFixed = true;\n    }\n\n    var newEndRow = {\n      rowIndex: lastCellHovered.rowIndex,\n      rowPinned: lastCellHovered.rowPinned\n    };\n    var rowChanged = !this.rowPositionUtils.sameRow(newEndRow, this.rangeController.getRangeEndRow(lastRange));\n\n    if (cellRanges.length === 2 && rowChanged) {\n      this.rangeController.updateRangeEnd({\n        cellRange: cellRanges[0],\n        cellPosition: __assign({}, newEndRow, {\n          column: cellRanges[0].columns[0]\n        })\n      });\n    }\n\n    this.endPosition = __assign({}, newEndRow, {\n      column: lastCellHovered.column\n    });\n    this.rangeController.extendLatestRangeToCell(this.endPosition);\n  };\n\n  RangeHandle.prototype.onDragEnd = function (e) {\n    var cellRange = ag_grid_community_1._.last(this.rangeController.getCellRanges());\n\n    this.fixRangeStartEnd(cellRange);\n    this.rangeFixed = false;\n  };\n\n  RangeHandle.prototype.fixRangeStartEnd = function (cellRange) {\n    var startRow = this.rangeController.getRangeStartRow(cellRange);\n    var endRow = this.rangeController.getRangeEndRow(cellRange);\n    var column = cellRange.columns[0];\n    cellRange.startRow = startRow;\n    cellRange.endRow = endRow;\n    cellRange.startColumn = column;\n  };\n\n  RangeHandle.TEMPLATE = '<div class=\"ag-range-handle\"></div>';\n  return RangeHandle;\n}(abstractSelectionHandle_1.AbstractSelectionHandle);\n\nexports.RangeHandle = RangeHandle;","map":null,"metadata":{},"sourceType":"script"}