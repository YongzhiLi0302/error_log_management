{"ast":null,"code":"// ag-grid-enterprise v21.2.1\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar main_1 = require(\"ag-grid-community/main\");\n\nvar rowGroupDropZonePanel_1 = require(\"./panels/rowGroupDropZonePanel\");\n\nvar pivotDropZonePanel_1 = require(\"./panels/pivotDropZonePanel\");\n\nvar GridHeaderDropZones =\n/** @class */\nfunction (_super) {\n  __extends(GridHeaderDropZones, _super);\n\n  function GridHeaderDropZones() {\n    return _super.call(this) || this;\n  }\n\n  GridHeaderDropZones.prototype.postConstruct = function () {\n    this.setGui(this.createNorthPanel());\n    this.eventService.addEventListener(main_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));\n    this.eventService.addEventListener(main_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onRowGroupChanged.bind(this));\n    this.onRowGroupChanged();\n  };\n\n  GridHeaderDropZones.prototype.createNorthPanel = function () {\n    var _this = this;\n\n    var topPanelGui = document.createElement('div');\n    var dropPanelVisibleListener = this.onDropPanelVisible.bind(this);\n    this.rowGroupComp = new rowGroupDropZonePanel_1.RowGroupDropZonePanel(true);\n    this.getContext().wireBean(this.rowGroupComp);\n    this.addDestroyFunc(function () {\n      return _this.rowGroupComp.destroy();\n    });\n    this.pivotComp = new pivotDropZonePanel_1.PivotDropZonePanel(true);\n    this.getContext().wireBean(this.pivotComp);\n    this.addDestroyFunc(function () {\n      return _this.pivotComp.destroy();\n    });\n    topPanelGui.appendChild(this.rowGroupComp.getGui());\n    topPanelGui.appendChild(this.pivotComp.getGui());\n    this.rowGroupComp.addEventListener(main_1.Component.EVENT_DISPLAYED_CHANGED, dropPanelVisibleListener);\n    this.pivotComp.addEventListener(main_1.Component.EVENT_DISPLAYED_CHANGED, dropPanelVisibleListener);\n    this.addDestroyFunc(function () {\n      _this.rowGroupComp.removeEventListener(main_1.Component.EVENT_DISPLAYED_CHANGED, dropPanelVisibleListener);\n\n      _this.pivotComp.removeEventListener(main_1.Component.EVENT_DISPLAYED_CHANGED, dropPanelVisibleListener);\n    });\n    this.onDropPanelVisible();\n    return topPanelGui;\n  };\n\n  GridHeaderDropZones.prototype.onDropPanelVisible = function () {\n    var bothDisplayed = this.rowGroupComp.isDisplayed() && this.pivotComp.isDisplayed();\n    this.rowGroupComp.addOrRemoveCssClass('ag-width-half', bothDisplayed);\n    this.pivotComp.addOrRemoveCssClass('ag-width-half', bothDisplayed);\n  };\n\n  GridHeaderDropZones.prototype.onRowGroupChanged = function () {\n    if (!this.rowGroupComp) {\n      return;\n    }\n\n    var rowGroupPanelShow = this.gridOptionsWrapper.getRowGroupPanelShow();\n\n    if (rowGroupPanelShow === main_1.Constants.ALWAYS) {\n      this.rowGroupComp.setDisplayed(true);\n    } else if (rowGroupPanelShow === main_1.Constants.ONLY_WHEN_GROUPING) {\n      var grouping = !this.columnController.isRowGroupEmpty();\n      this.rowGroupComp.setDisplayed(grouping);\n    } else {\n      this.rowGroupComp.setDisplayed(false);\n    }\n  };\n\n  __decorate([main_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", main_1.GridOptionsWrapper)], GridHeaderDropZones.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([main_1.Autowired('columnController'), __metadata(\"design:type\", main_1.ColumnController)], GridHeaderDropZones.prototype, \"columnController\", void 0);\n\n  __decorate([main_1.Autowired('eventService'), __metadata(\"design:type\", main_1.EventService)], GridHeaderDropZones.prototype, \"eventService\", void 0);\n\n  __decorate([main_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], GridHeaderDropZones.prototype, \"postConstruct\", null);\n\n  return GridHeaderDropZones;\n}(main_1.Component);\n\nexports.GridHeaderDropZones = GridHeaderDropZones;","map":null,"metadata":{},"sourceType":"script"}