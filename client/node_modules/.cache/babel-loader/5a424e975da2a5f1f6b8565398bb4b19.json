{"ast":null,"code":"// ag-grid-enterprise v21.2.1\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar setValueModel_1 = require(\"./setValueModel\");\n\nvar setFilterListItem_1 = require(\"./setFilterListItem\");\n\nvar virtualList_1 = require(\"../rendering/virtualList\");\n\nvar CheckboxState;\n\n(function (CheckboxState) {\n  CheckboxState[CheckboxState[\"CHECKED\"] = 0] = \"CHECKED\";\n  CheckboxState[CheckboxState[\"UNCHECKED\"] = 1] = \"UNCHECKED\";\n  CheckboxState[CheckboxState[\"INTERMEDIATE\"] = 2] = \"INTERMEDIATE\";\n})(CheckboxState || (CheckboxState = {}));\n\nvar SetFilter =\n/** @class */\nfunction (_super) {\n  __extends(SetFilter, _super);\n\n  function SetFilter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  } // unlike the simple filter's, nothing in the set filter UI shows/hides.\n  // maybe this method belongs in abstractSimpleFilter???\n\n\n  SetFilter.prototype.updateUiVisibility = function () {};\n\n  SetFilter.prototype.createBodyTemplate = function () {\n    var translate = this.gridOptionsWrapper.getLocaleTextFunc();\n    return \"<div ref=\\\"ag-filter-loading\\\" class=\\\"loading-filter ag-hidden\\\">\" + translate('loadingOoo', 'Loading...') + \"</div>\\n                <div>\\n                    <div class=\\\"ag-filter-header-container\\\" role=\\\"presentation\\\">\\n                        <div class=\\\"ag-input-wrapper\\\" id=\\\"ag-mini-filter\\\" role=\\\"presentation\\\">\\n                            <input ref=\\\"eMiniFilter\\\" class=\\\"ag-filter-filter\\\" type=\\\"text\\\" placeholder=\\\"\" + translate('searchOoo', 'Search...') + \"\\\"/>\\n                        </div>\\n                        <label ref=\\\"eSelectAllContainer\\\" class=\\\"ag-set-filter-item\\\">\\n                            <div ref=\\\"eSelectAll\\\" class=\\\"ag-filter-checkbox\\\"></div><span class=\\\"ag-filter-value\\\">(\" + translate('selectAll', 'Select All') + \")</span>\\n                        </label>\\n                    </div>\\n                    <div ref=\\\"eSetFilterList\\\" class=\\\"ag-set-filter-list\\\" role=\\\"presentation\\\"></div>\\n                </div>\";\n  };\n\n  SetFilter.prototype.resetUiToDefaults = function () {\n    this.setMiniFilter(null);\n    this.valueModel.setModel(null, true);\n    this.selectEverything();\n  };\n\n  SetFilter.prototype.setModelIntoUi = function (model) {\n    this.resetUiToDefaults();\n\n    if (model) {\n      // also supporting old filter model for backwards compatibility\n      var newValues = model instanceof Array ? model : model.values;\n      this.valueModel.setModel(newValues);\n      this.updateSelectAll();\n      this.virtualList.refresh();\n    }\n  };\n\n  SetFilter.prototype.getModelFromUi = function () {\n    var values = this.valueModel.getModel();\n\n    if (!values) {\n      return null;\n    }\n\n    if (this.gridOptionsWrapper.isEnableOldSetFilterModel()) {\n      // this is a hack, it breaks casting rules, to apply with old model\n      return values;\n    } else {\n      return {\n        values: values,\n        filterType: 'set'\n      };\n    }\n  };\n\n  SetFilter.prototype.areModelsEqual = function (a, b) {\n    return false;\n  };\n\n  SetFilter.prototype.setParams = function (params) {\n    _super.prototype.setParams.call(this, params);\n\n    this.setFilterParams = params;\n    this.eCheckedIcon = ag_grid_community_1._.createIconNoSpan('checkboxChecked', this.gridOptionsWrapper, this.setFilterParams.column);\n    this.eUncheckedIcon = ag_grid_community_1._.createIconNoSpan('checkboxUnchecked', this.gridOptionsWrapper, this.setFilterParams.column);\n    this.eIndeterminateCheckedIcon = ag_grid_community_1._.createIconNoSpan('checkboxIndeterminate', this.gridOptionsWrapper, this.setFilterParams.column);\n    this.initialiseFilterBodyUi();\n    var doSyncLikeExcel = params.syncValuesLikeExcel // sync like excel only withs with CSRM\n    && this.rowModel.getType() === ag_grid_community_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE // sync only needed if user not providing values\n    && !params.values;\n\n    if (doSyncLikeExcel) {\n      this.setupSyncValuesLikeExcel();\n    }\n  };\n\n  SetFilter.prototype.resetFilterValuesAndReapplyModel = function () {\n    var modelBeforeUpdate = this.getModel();\n    this.resetFilterValues();\n\n    if (modelBeforeUpdate) {\n      this.setModel(modelBeforeUpdate);\n    }\n  };\n\n  SetFilter.prototype.setupSyncValuesLikeExcel = function () {\n    var _this = this;\n\n    var col = this.setFilterParams.column;\n\n    var rowDataUpdatedListener = function () {\n      _this.resetFilterValuesAndReapplyModel();\n    };\n\n    var cellValueChangedListener = function (event) {\n      // only interested in changes to do with this column\n      if (event.column !== col) {\n        return;\n      }\n\n      _this.resetFilterValuesAndReapplyModel();\n    };\n\n    this.addDestroyableEventListener(this.eventService, ag_grid_community_1.Events.EVENT_ROW_DATA_UPDATED, rowDataUpdatedListener);\n    this.addDestroyableEventListener(this.eventService, ag_grid_community_1.Events.EVENT_CELL_VALUE_CHANGED, cellValueChangedListener);\n  };\n\n  SetFilter.prototype.updateCheckboxIcon = function () {\n    ag_grid_community_1._.clearElement(this.eSelectAll);\n\n    var icon;\n\n    switch (this.selectAllState) {\n      case CheckboxState.INTERMEDIATE:\n        icon = this.eIndeterminateCheckedIcon;\n        break;\n\n      case CheckboxState.CHECKED:\n        icon = this.eCheckedIcon;\n        break;\n\n      case CheckboxState.UNCHECKED:\n        icon = this.eUncheckedIcon;\n        break;\n\n      default:\n        // default happens when initialising for first time\n        icon = this.eCheckedIcon;\n        break;\n    }\n\n    this.eSelectAll.appendChild(icon);\n  };\n\n  SetFilter.prototype.setLoading = function (loading) {\n    ag_grid_community_1._.setDisplayed(this.eFilterLoading, loading);\n  };\n\n  SetFilter.prototype.initialiseFilterBodyUi = function () {\n    var _this = this;\n\n    this.virtualList = new virtualList_1.VirtualList();\n    this.getContext().wireBean(this.virtualList);\n    var eSetFilterList = this.getRefElement('eSetFilterList');\n\n    if (eSetFilterList) {\n      eSetFilterList.appendChild(this.virtualList.getGui());\n    }\n\n    if (ag_grid_community_1._.exists(this.setFilterParams.cellHeight)) {\n      this.virtualList.setRowHeight(this.setFilterParams.cellHeight);\n    }\n\n    this.virtualList.setComponentCreator(this.createSetListItem.bind(this));\n    this.valueModel = new setValueModel_1.SetValueModel(this.setFilterParams.colDef, this.setFilterParams.rowModel, this.setFilterParams.valueGetter, this.setFilterParams.doesRowPassOtherFilter, this.setFilterParams.suppressSorting, function (values, toSelect) {\n      return _this.setFilterValues(values, toSelect ? false : true, toSelect ? true : false, toSelect);\n    }, this.setLoading.bind(this), this.valueFormatterService, this.setFilterParams.column);\n    this.virtualList.setModel(new ModelWrapper(this.valueModel));\n\n    ag_grid_community_1._.setDisplayed(this.getGui().querySelector('#ag-mini-filter'), !this.setFilterParams.suppressMiniFilter);\n\n    this.eMiniFilter.value = this.valueModel.getMiniFilter();\n    this.addDestroyableEventListener(this.eMiniFilter, 'input', this.onMiniFilterInput.bind(this));\n    this.addDestroyableEventListener(this.eMiniFilter, 'keypress', this.onMiniFilterKeyPress.bind(this));\n    this.updateCheckboxIcon();\n    this.addDestroyableEventListener(this.eSelectAllContainer, 'click', this.onSelectAll.bind(this));\n    this.updateSelectAll();\n\n    if (this.setFilterParams.suppressSelectAll) {\n      ag_grid_community_1._.setDisplayed(this.eSelectAllContainer, false);\n    }\n\n    this.virtualList.refresh();\n  };\n\n  SetFilter.prototype.createSetListItem = function (value) {\n    var _this = this;\n\n    var listItem = new setFilterListItem_1.SetFilterListItem(value, this.setFilterParams.column);\n    this.getContext().wireBean(listItem);\n    listItem.setSelected(this.valueModel.isValueSelected(value));\n    listItem.addEventListener(setFilterListItem_1.SetFilterListItem.EVENT_SELECTED, function () {\n      _this.onItemSelected(value, listItem.isSelected());\n    });\n    return listItem;\n  }; // we need to have the gui attached before we can draw the virtual rows, as the\n  // virtual row logic needs info about the gui state\n\n\n  SetFilter.prototype.afterGuiAttached = function (params) {\n    this.virtualList.refresh();\n    this.eMiniFilter.focus();\n  };\n\n  SetFilter.prototype.applyModel = function () {\n    var _this = this;\n\n    var res = _super.prototype.applyModel.call(this); // keep the appliedModelValuesMapped in sync with the applied model\n\n\n    var appliedModel = this.getModel();\n\n    if (appliedModel) {\n      this.appliedModelValuesMapped = {};\n      appliedModel.values.forEach(function (value) {\n        return _this.appliedModelValuesMapped[value] = true;\n      });\n    } else {\n      this.appliedModelValuesMapped = undefined;\n    }\n\n    return res;\n  };\n\n  SetFilter.prototype.doesFilterPass = function (params) {\n    // should never happen, if filter model not set, then this method should never be called\n    if (!this.appliedModelValuesMapped) {\n      return true;\n    }\n\n    var value = this.setFilterParams.valueGetter(params.node);\n\n    if (this.setFilterParams.colDef.keyCreator) {\n      value = this.setFilterParams.colDef.keyCreator({\n        value: value\n      });\n    }\n\n    value = ag_grid_community_1._.makeNull(value);\n\n    if (Array.isArray(value)) {\n      for (var i = 0; i < value.length; i++) {\n        var valueExistsInMap = !!this.appliedModelValuesMapped[value[i]];\n\n        if (valueExistsInMap) {\n          return true;\n        }\n      }\n\n      return false;\n    } else {\n      var valueExistsInMap = !!this.appliedModelValuesMapped[value];\n      return valueExistsInMap;\n    }\n  };\n\n  SetFilter.prototype.onNewRowsLoaded = function () {\n    var valuesType = this.valueModel.getValuesType();\n    var valuesTypeProvided = valuesType === setValueModel_1.SetFilterModelValuesType.PROVIDED_CB || valuesType === setValueModel_1.SetFilterModelValuesType.PROVIDED_LIST; // if the user is providing values, and we are keeping the previous selection, then\n    // loading new rows into the grid should have no impact.\n\n    var newRowsActionKeep = this.isNewRowsActionKeep();\n\n    if (newRowsActionKeep && valuesTypeProvided) {\n      return;\n    }\n\n    var everythingSelected = !this.getModel(); // default is reset\n\n    this.valueModel.refreshAfterNewRowsLoaded(newRowsActionKeep, everythingSelected);\n    this.updateSelectAll();\n    this.virtualList.refresh();\n    this.applyModel();\n  }; //noinspection JSUnusedGlobalSymbols\n\n  /**\n   * Public method provided so the user can change the value of the filter once\n   * the filter has been already started\n   * @param options The options to use.\n   * @param selectAll If by default all the values should be selected.\n   * @param notify If we should let know the model that the values of the filter have changed\n   * @param toSelect The subset of options to subselect\n   */\n\n\n  SetFilter.prototype.setFilterValues = function (options, selectAll, notify, toSelect) {\n    var _this = this;\n\n    if (selectAll === void 0) {\n      selectAll = false;\n    }\n\n    if (notify === void 0) {\n      notify = true;\n    }\n\n    this.valueModel.onFilterValuesReady(function () {\n      var keepSelection = _this.setFilterParams && _this.setFilterParams.newRowsAction === 'keep';\n\n      _this.valueModel.setValuesType(setValueModel_1.SetFilterModelValuesType.PROVIDED_LIST);\n\n      _this.valueModel.refreshValues(options, keepSelection, selectAll);\n\n      _this.updateSelectAll();\n\n      var actualToSelect = toSelect ? toSelect : options;\n      actualToSelect.forEach(function (option) {\n        return _this.valueModel.selectValue(option);\n      });\n\n      _this.virtualList.refresh();\n\n      if (notify) {\n        // this.onUiChangedListener(true);\n        _this.onUiChanged();\n      }\n    });\n  }; //noinspection JSUnusedGlobalSymbols\n\n  /**\n   * Public method provided so the user can reset the values of the filter once that it has started\n   * @param options The options to use.\n   */\n\n\n  SetFilter.prototype.resetFilterValues = function () {\n    this.valueModel.setValuesType(setValueModel_1.SetFilterModelValuesType.NOT_PROVIDED);\n    this.onNewRowsLoaded();\n  };\n\n  SetFilter.prototype.onAnyFilterChanged = function () {\n    this.valueModel.refreshAfterAnyFilterChanged();\n    this.virtualList.refresh();\n  };\n\n  SetFilter.prototype.updateSelectAll = function () {\n    if (this.valueModel.isEverythingSelected()) {\n      this.selectAllState = CheckboxState.CHECKED;\n    } else if (this.valueModel.isNothingSelected()) {\n      this.selectAllState = CheckboxState.UNCHECKED;\n    } else {\n      this.selectAllState = CheckboxState.INTERMEDIATE;\n    }\n\n    this.updateCheckboxIcon();\n  };\n\n  SetFilter.prototype.onMiniFilterKeyPress = function (e) {\n    if (ag_grid_community_1._.isKeyPressed(e, ag_grid_community_1.Constants.KEY_ENTER)) {\n      this.onEnterKeyOnMiniFilter();\n    }\n  };\n\n  SetFilter.prototype.onEnterKeyOnMiniFilter = function () {\n    this.valueModel.selectAllFromMiniFilter();\n    this.virtualList.refresh();\n    this.updateSelectAll();\n    this.onUiChanged();\n  };\n\n  SetFilter.prototype.onMiniFilterInput = function () {\n    var miniFilterChanged = this.valueModel.setMiniFilter(this.eMiniFilter.value);\n\n    if (miniFilterChanged) {\n      this.virtualList.refresh();\n    }\n\n    this.updateSelectAll();\n  };\n\n  SetFilter.prototype.onSelectAll = function (event) {\n    event.preventDefault();\n\n    ag_grid_community_1._.addAgGridEventPath(event);\n\n    if (this.selectAllState === CheckboxState.CHECKED) {\n      this.selectAllState = CheckboxState.UNCHECKED;\n    } else {\n      this.selectAllState = CheckboxState.CHECKED;\n    }\n\n    this.doSelectAll();\n  };\n\n  SetFilter.prototype.doSelectAll = function () {\n    var checked = this.selectAllState === CheckboxState.CHECKED;\n\n    if (checked) {\n      this.valueModel.selectAllUsingMiniFilter();\n    } else {\n      this.valueModel.selectNothingUsingMiniFilter();\n    }\n\n    this.virtualList.refresh();\n    this.onUiChanged();\n    this.updateSelectAll();\n  };\n\n  SetFilter.prototype.onItemSelected = function (value, selected) {\n    if (selected) {\n      this.valueModel.selectValue(value);\n    } else {\n      this.valueModel.unselectValue(value);\n    }\n\n    this.updateSelectAll();\n    this.onUiChanged();\n  };\n\n  SetFilter.prototype.setMiniFilter = function (newMiniFilter) {\n    this.valueModel.setMiniFilter(newMiniFilter);\n    this.eMiniFilter.value = this.valueModel.getMiniFilter();\n  };\n\n  SetFilter.prototype.getMiniFilter = function () {\n    return this.valueModel.getMiniFilter();\n  };\n\n  SetFilter.prototype.selectEverything = function () {\n    this.valueModel.selectAllUsingMiniFilter();\n    this.updateSelectAll();\n    this.virtualList.refresh();\n  };\n\n  SetFilter.prototype.selectNothing = function () {\n    this.valueModel.selectNothingUsingMiniFilter();\n    this.updateSelectAll();\n    this.virtualList.refresh();\n  };\n\n  SetFilter.prototype.unselectValue = function (value) {\n    this.valueModel.unselectValue(value);\n    this.updateSelectAll();\n    this.virtualList.refresh();\n  };\n\n  SetFilter.prototype.selectValue = function (value) {\n    this.valueModel.selectValue(value);\n    this.updateSelectAll();\n    this.virtualList.refresh();\n  };\n\n  SetFilter.prototype.isValueSelected = function (value) {\n    return this.valueModel.isValueSelected(value);\n  };\n\n  SetFilter.prototype.isEverythingSelected = function () {\n    return this.valueModel.isEverythingSelected();\n  };\n\n  SetFilter.prototype.isNothingSelected = function () {\n    return this.valueModel.isNothingSelected();\n  };\n\n  SetFilter.prototype.getUniqueValueCount = function () {\n    return this.valueModel.getUniqueValueCount();\n  };\n\n  SetFilter.prototype.getUniqueValue = function (index) {\n    return this.valueModel.getUniqueValue(index);\n  };\n\n  __decorate([ag_grid_community_1.RefSelector('eSelectAll'), __metadata(\"design:type\", HTMLInputElement)], SetFilter.prototype, \"eSelectAll\", void 0);\n\n  __decorate([ag_grid_community_1.RefSelector('eSelectAllContainer'), __metadata(\"design:type\", HTMLElement)], SetFilter.prototype, \"eSelectAllContainer\", void 0);\n\n  __decorate([ag_grid_community_1.RefSelector('eMiniFilter'), __metadata(\"design:type\", HTMLInputElement)], SetFilter.prototype, \"eMiniFilter\", void 0);\n\n  __decorate([ag_grid_community_1.RefSelector('ag-filter-loading'), __metadata(\"design:type\", HTMLInputElement)], SetFilter.prototype, \"eFilterLoading\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('valueFormatterService'), __metadata(\"design:type\", ag_grid_community_1.ValueFormatterService)], SetFilter.prototype, \"valueFormatterService\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('eventService'), __metadata(\"design:type\", ag_grid_community_1.EventService)], SetFilter.prototype, \"eventService\", void 0);\n\n  return SetFilter;\n}(ag_grid_community_1.ProvidedFilter);\n\nexports.SetFilter = SetFilter;\n\nvar ModelWrapper =\n/** @class */\nfunction () {\n  function ModelWrapper(model) {\n    this.model = model;\n  }\n\n  ModelWrapper.prototype.getRowCount = function () {\n    return this.model.getDisplayedValueCount();\n  };\n\n  ModelWrapper.prototype.getRow = function (index) {\n    return this.model.getDisplayedValue(index);\n  };\n\n  return ModelWrapper;\n}();","map":null,"metadata":{},"sourceType":"script"}