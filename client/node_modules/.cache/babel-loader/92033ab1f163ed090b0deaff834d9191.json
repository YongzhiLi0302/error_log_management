{"ast":null,"code":"var _jsxFileName = \"/Users/LiYongzhi/Desktop/error_log_management/src/components/ProcessTable.js\";\nimport React, { Component } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport \"ag-grid-enterprise\";\nexport default class ProcessTable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onGridReady = params => {\n      this.gridApi = params.api;\n      this.gridColumnApi = params.columnApi;\n    };\n\n    this.state = {\n      columnDefs: [{\n        field: \"name\",\n        headerName: \"Name\",\n        rowGroup: true,\n        hide: true\n      }, {\n        headerName: \"Game Name\",\n        field: \"game.name\",\n        width: 267,\n        editable: true,\n        filter: \"agSetColumnFilter\",\n        tooltipField: \"gameName\",\n        checkboxSelection: function (params) {\n          return params.columnApi.getRowGroupColumns().length === 0;\n        },\n        cellClass: function () {\n          return \"alphabet\";\n        }\n      }, {\n        headerName: \"Country\",\n        field: \"country\",\n        width: 200,\n        editable: true,\n        cellEditor: \"agRichSelectCellEditor\",\n        cellEditorParams: {\n          values: [\"Argentina\", \"Brazil\", \"Colombia\", \"France\", \"Uruguay\", \"Venezuela\"]\n        },\n        floatCell: true,\n        filterParams: {\n          cellHeight: 20,\n          newRowsAction: \"keep\"\n        }\n      }, {\n        headerName: \"Language\",\n        field: \"language\",\n        width: 200,\n        editable: true,\n        filter: \"agSetColumnFilter\",\n        cellEditor: \"agSelectCellEditor\",\n        cellEditorParams: {\n          values: [\"English\", \"Spanish\", \"French\", \"Portuguese\", \"(other)\"]\n        }\n      }],\n      groupDefaultExpanded: -1,\n      autoGroupColumnDef: {\n        headerName: \"Name\",\n        field: \"name\",\n        width: 250,\n        editable: true,\n        cellRendererParams: {\n          checkbox: true\n        }\n      },\n      defaultColDef: {\n        checkboxSelection: function (params) {\n          var isGrouping = params.columnApi.getRowGroupColumns().length > 0;\n          return params.colIndex === 0 && !isGrouping;\n        }\n      },\n      rowData: createData(),\n      rowSelection: \"multiple\"\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"myGrid\",\n      style: {\n        height: \"100%\",\n        width: \"100%\"\n      },\n      className: \"ag-theme-bootstrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(AgGridReact, {\n      columnDefs: this.state.columnDefs,\n      groupSelectsChildren: true,\n      groupDefaultExpanded: this.state.groupDefaultExpanded,\n      autoGroupColumnDef: this.state.autoGroupColumnDef,\n      defaultColDef: this.state.defaultColDef,\n      rowData: this.state.rowData,\n      rowSelection: this.state.rowSelection,\n      onGridReady: this.onGridReady,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })));\n  }\n\n}\n\nfunction countries() {\n  var countries = [{\n    country: \"Ireland\",\n    continent: \"Europe\",\n    language: \"English\"\n  }, {\n    country: \"Spain\",\n    continent: \"Europe\",\n    language: \"Spanish\"\n  }, {\n    country: \"United Kingdom\",\n    continent: \"Europe\",\n    language: \"English\"\n  }, {\n    country: \"France\",\n    continent: \"Europe\",\n    language: \"French\"\n  }, {\n    country: \"Germany\",\n    continent: \"Europe\",\n    language: \"(other)\"\n  }, {\n    country: \"Sweden\",\n    continent: \"Europe\",\n    language: \"(other)\"\n  }, {\n    country: \"Norway\",\n    continent: \"Europe\",\n    language: \"(other)\"\n  }, {\n    country: \"Italy\",\n    continent: \"Europe\",\n    language: \"(other)\"\n  }, {\n    country: \"Greece\",\n    continent: \"Europe\",\n    language: \"(other)\"\n  }, {\n    country: \"Iceland\",\n    continent: \"Europe\",\n    language: \"(other)\"\n  }, {\n    country: \"Brazil\",\n    continent: \"South America\",\n    language: \"Portuguese\"\n  }];\n  return countries;\n}\n\nvar games = [\"Chess\", \"Cross and Circle\", \"Dald√∏s\", \"Downfall\", \"DVONN\", \"Fanorona\", \"Game of the Generals\", \"Ghosts\", \"Abalone\", \"Agon\", \"Backgammon\", \"Battleship\", \"Blockade\", \"Blood Bowl\", \"Bul\", \"Camelot\", \"Checkers\", \"Go\", \"Gipf\", \"Guess Who?\", \"Hare and Hounds\", \"Hex\", \"Hijara\"];\n\nfunction createData() {\n  var rowCount = 20;\n  var row = 0;\n  var data = [];\n\n  for (var i = 0; i < rowCount; i++) {\n    var rowItem = createRowItem(row);\n    data.push(rowItem);\n    row++;\n  }\n\n  return data;\n}\n\nfunction createRowItem(row) {\n  var firstNames = [\"Sophie\", \"Isabelle\", \"Emily\", \"Olivia\"];\n  var lastNames = [\"Beckham\", \"Black\", \"Braxton\", \"Brennan\"];\n  var rowItem = {};\n  var countryData = countries()[row % countries().length];\n  rowItem.country = countryData.country;\n  rowItem.language = countryData.language;\n  var firstName = firstNames[row % firstNames.length];\n  var lastName = lastNames[row % lastNames.length];\n  rowItem.name = firstName + \" \" + lastName;\n  rowItem.game = {\n    name: games[Math.floor(row * 13 / 17 * 19) % games.length]\n  };\n  rowItem.gameName = \"toolTip: \" + rowItem.game.name.toUpperCase();\n  return rowItem;\n} // width: \"80%\",\n//                     margin: \"auto\",\n//                     borderLeft: \"1px solid #f7f7f7\",\n//                     borderRight: \"1px solid #f7f7f7\"\n// <div \n//     className=\"ag-theme-material\"\n//     style={{ \n//     height: '600px', \n//     width: '80%',\n//     margin: \"auto\",\n//     marginTop: \"60px\",\n//     justifyContent: \"center\",\n//     }} \n// >\n//     <AgGridReact\n//     columnDefs={this.state.columnDefs}\n//     rowData={this.state.rowData} style={{\n//     }}>\n//     </AgGridReact>\n// </div>","map":{"version":3,"sources":["/Users/LiYongzhi/Desktop/error_log_management/src/components/ProcessTable.js"],"names":["React","Component","AgGridReact","ProcessTable","constructor","props","onGridReady","params","gridApi","api","gridColumnApi","columnApi","state","columnDefs","field","headerName","rowGroup","hide","width","editable","filter","tooltipField","checkboxSelection","getRowGroupColumns","length","cellClass","cellEditor","cellEditorParams","values","floatCell","filterParams","cellHeight","newRowsAction","groupDefaultExpanded","autoGroupColumnDef","cellRendererParams","checkbox","defaultColDef","isGrouping","colIndex","rowData","createData","rowSelection","render","height","countries","country","continent","language","games","rowCount","row","data","i","rowItem","createRowItem","push","firstNames","lastNames","countryData","firstName","lastName","name","game","Math","floor","gameName","toUpperCase"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport \"ag-grid-enterprise\";\n\nexport default class ProcessTable extends Component {\n    constructor(props) {\n        super(props);\n    \n        this.state = {\n          columnDefs: [\n            {\n              field: \"name\",\n              headerName: \"Name\",\n              rowGroup: true,\n              hide: true\n            },\n            {\n              headerName: \"Game Name\",\n              field: \"game.name\",\n              width: 267,\n              editable: true,\n              filter: \"agSetColumnFilter\",\n              tooltipField: \"gameName\",\n              checkboxSelection: function(params) {\n                return params.columnApi.getRowGroupColumns().length === 0;\n              },\n              cellClass: function() {\n                return \"alphabet\";\n              }\n            },\n            {\n              headerName: \"Country\",\n              field: \"country\",\n              width: 200,\n              editable: true,\n              cellEditor: \"agRichSelectCellEditor\",\n              cellEditorParams: {\n                values: [\n                  \"Argentina\",\n                  \"Brazil\",\n                  \"Colombia\",\n                  \"France\",\n                  \"Uruguay\",\n                  \"Venezuela\"\n                ]\n              },\n              floatCell: true,\n              filterParams: {\n                cellHeight: 20,\n                newRowsAction: \"keep\"\n              }\n            },\n            {\n              headerName: \"Language\",\n              field: \"language\",\n              width: 200,\n              editable: true,\n              filter: \"agSetColumnFilter\",\n              cellEditor: \"agSelectCellEditor\",\n              cellEditorParams: {\n                values: [\"English\", \"Spanish\", \"French\", \"Portuguese\", \"(other)\"]\n              }\n            }\n          ],\n          groupDefaultExpanded: -1,\n          autoGroupColumnDef: {\n            headerName: \"Name\",\n            field: \"name\",\n            width: 250,\n            editable: true,\n            cellRendererParams: { checkbox: true }\n          },\n          defaultColDef: {\n            checkboxSelection: function(params) {\n              var isGrouping = params.columnApi.getRowGroupColumns().length > 0;\n              return params.colIndex === 0 && !isGrouping;\n            }\n          },\n          rowData: createData(),\n          rowSelection: \"multiple\"\n        };\n      }\n    \n      onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n      };\n    \n      render() {\n        return (\n          <div style={{ width: \"100%\", height: \"100%\" }}>\n            <div\n              id=\"myGrid\"\n              style={{\n                height: \"100%\",\n                width: \"100%\"\n              }}\n              className=\"ag-theme-bootstrap\"\n            >\n              <AgGridReact\n                columnDefs={this.state.columnDefs}\n                groupSelectsChildren={true}\n                groupDefaultExpanded={this.state.groupDefaultExpanded}\n                autoGroupColumnDef={this.state.autoGroupColumnDef}\n                defaultColDef={this.state.defaultColDef}\n                rowData={this.state.rowData}\n                rowSelection={this.state.rowSelection}\n                onGridReady={this.onGridReady}\n              />\n            </div>\n          </div>\n        );\n      }\n    }\n    \n    function countries() {\n      var countries = [\n        {\n          country: \"Ireland\",\n          continent: \"Europe\",\n          language: \"English\"\n        },\n        {\n          country: \"Spain\",\n          continent: \"Europe\",\n          language: \"Spanish\"\n        },\n        {\n          country: \"United Kingdom\",\n          continent: \"Europe\",\n          language: \"English\"\n        },\n        {\n          country: \"France\",\n          continent: \"Europe\",\n          language: \"French\"\n        },\n        {\n          country: \"Germany\",\n          continent: \"Europe\",\n          language: \"(other)\"\n        },\n        {\n          country: \"Sweden\",\n          continent: \"Europe\",\n          language: \"(other)\"\n        },\n        {\n          country: \"Norway\",\n          continent: \"Europe\",\n          language: \"(other)\"\n        },\n        {\n          country: \"Italy\",\n          continent: \"Europe\",\n          language: \"(other)\"\n        },\n        {\n          country: \"Greece\",\n          continent: \"Europe\",\n          language: \"(other)\"\n        },\n        {\n          country: \"Iceland\",\n          continent: \"Europe\",\n          language: \"(other)\"\n        },\n        {\n          country: \"Brazil\",\n          continent: \"South America\",\n          language: \"Portuguese\"\n        },\n      ];\n      return countries;\n    }\n    var games = [\n      \"Chess\",\n      \"Cross and Circle\",\n      \"Dald√∏s\",\n      \"Downfall\",\n      \"DVONN\",\n      \"Fanorona\",\n      \"Game of the Generals\",\n      \"Ghosts\",\n      \"Abalone\",\n      \"Agon\",\n      \"Backgammon\",\n      \"Battleship\",\n      \"Blockade\",\n      \"Blood Bowl\",\n      \"Bul\",\n      \"Camelot\",\n      \"Checkers\",\n      \"Go\",\n      \"Gipf\",\n      \"Guess Who?\",\n      \"Hare and Hounds\",\n      \"Hex\",\n      \"Hijara\",\n    ];\n    function createData() {\n      var rowCount = 20;\n      var row = 0;\n      var data = [];\n      for (var i = 0; i < rowCount; i++) {\n        var rowItem = createRowItem(row);\n        data.push(rowItem);\n        row++;\n      }\n      return data;\n    }\n    function createRowItem(row) {\n      var firstNames = [\"Sophie\", \"Isabelle\", \"Emily\", \"Olivia\"];\n      var lastNames = [\"Beckham\", \"Black\", \"Braxton\", \"Brennan\"];\n      var rowItem = {};\n      var countryData = countries()[row % countries().length];\n      rowItem.country = countryData.country;\n      rowItem.language = countryData.language;\n      var firstName = firstNames[row % firstNames.length];\n      var lastName = lastNames[row % lastNames.length];\n      rowItem.name = firstName + \" \" + lastName;\n      rowItem.game = { name: games[Math.floor(((row * 13) / 17) * 19) % games.length] };\n      rowItem.gameName = \"toolTip: \" + rowItem.game.name.toUpperCase();\n      return rowItem;\n}\n\n// width: \"80%\",\n//                     margin: \"auto\",\n//                     borderLeft: \"1px solid #f7f7f7\",\n//                     borderRight: \"1px solid #f7f7f7\"\n // <div \n            //     className=\"ag-theme-material\"\n            //     style={{ \n            //     height: '600px', \n            //     width: '80%',\n            //     margin: \"auto\",\n            //     marginTop: \"60px\",\n            //     justifyContent: \"center\",\n            //     }} \n            // >\n            //     <AgGridReact\n            //     columnDefs={this.state.columnDefs}\n            //     rowData={this.state.rowData} style={{\n                    \n            //     }}>\n            //     </AgGridReact>\n            // </div>"]},"metadata":{},"sourceType":"module"}