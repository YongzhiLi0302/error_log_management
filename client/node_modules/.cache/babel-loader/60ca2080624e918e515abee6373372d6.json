{"ast":null,"code":"// ag-grid-enterprise v21.2.1\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar abstractSelectionHandle_1 = require(\"./abstractSelectionHandle\");\n\nvar FillHandle =\n/** @class */\nfunction (_super) {\n  __extends(FillHandle, _super);\n\n  function FillHandle() {\n    var _this = _super.call(this, FillHandle.TEMPLATE) || this;\n\n    _this.markedCellComps = [];\n    _this.cellValues = [];\n    _this.isUp = false;\n    _this.isLeft = false;\n    _this.isReduce = false;\n    _this.type = 'fill';\n    return _this;\n  }\n\n  FillHandle.prototype.onDrag = function (e) {\n    if (!this.initialXY) {\n      var _a = this.getGui().getBoundingClientRect(),\n          x_1 = _a.x,\n          y_1 = _a.y;\n\n      this.initialXY = {\n        x: x_1,\n        y: y_1\n      };\n    }\n\n    var _b = this.initialXY,\n        x = _b.x,\n        y = _b.y;\n    var diffX = Math.abs(x - e.clientX);\n    var diffY = Math.abs(y - e.clientY);\n    var direction = diffX > diffY ? 'x' : 'y';\n\n    if (direction !== this.dragAxis) {\n      this.dragAxis = direction;\n    }\n\n    if (!this.initialPosition) {\n      var cellComp = this.getCellComp();\n\n      if (!cellComp) {\n        return;\n      }\n\n      this.initialPosition = cellComp.getCellPosition();\n    }\n\n    var lastCellHovered = this.getLastCellHovered();\n\n    if (lastCellHovered && lastCellHovered !== this.lastCellMarked) {\n      this.lastCellMarked = lastCellHovered;\n      this.markPathFrom(this.initialPosition, lastCellHovered);\n    }\n  };\n\n  FillHandle.prototype.onDragEnd = function (e) {\n    if (!this.markedCellComps.length) {\n      return;\n    }\n\n    var isX = this.dragAxis === 'x';\n    var initialRange = this.getCellRange();\n    var colLen = initialRange.columns.length;\n    var rangeStartRow = this.getRangeStartRow();\n    var rangeEndRow = this.getRangeEndRow();\n    var finalRange;\n\n    if (!this.isUp && !this.isLeft) {\n      finalRange = this.rangeController.createCellRangeFromCellRangeParams({\n        rowStartIndex: rangeStartRow.rowIndex,\n        rowStartPinned: rangeStartRow.rowPinned,\n        columnStart: initialRange.columns[0],\n        rowEndIndex: isX ? rangeEndRow.rowIndex : this.lastCellMarked.rowIndex,\n        rowEndPinned: isX ? rangeEndRow.rowPinned : this.lastCellMarked.rowPinned,\n        columnEnd: isX ? this.lastCellMarked.column : initialRange.columns[colLen - 1]\n      });\n    } else {\n      var startRow = isX ? rangeStartRow : this.lastCellMarked;\n      finalRange = this.rangeController.createCellRangeFromCellRangeParams({\n        rowStartIndex: startRow.rowIndex,\n        rowStartPinned: startRow.rowPinned,\n        columnStart: isX ? this.lastCellMarked.column : initialRange.columns[0],\n        rowEndIndex: rangeEndRow.rowIndex,\n        rowEndPinned: rangeEndRow.rowPinned,\n        columnEnd: initialRange.columns[colLen - 1]\n      });\n    }\n\n    if (finalRange) {\n      this.handleValueChanged(initialRange, finalRange, e.altKey);\n      this.rangeController.setCellRanges([finalRange]);\n    }\n  };\n\n  FillHandle.prototype.handleValueChanged = function (initialRange, finalRange, altKey) {\n    var _this = this;\n\n    var initialRangeEndRow = this.rangeController.getRangeEndRow(initialRange);\n    var initialRangeStartRow = this.rangeController.getRangeStartRow(initialRange);\n    var finalRangeEndRow = this.rangeController.getRangeEndRow(finalRange);\n    var finalRangeStartRow = this.rangeController.getRangeStartRow(finalRange);\n    var isVertical = this.dragAxis === 'y'; // if the range is being reduced in size, all we need to do is\n    // clear the cells that are no longer part of the range\n\n    if (this.isReduce) {\n      var columns = isVertical ? initialRange.columns : initialRange.columns.filter(function (col) {\n        return finalRange.columns.indexOf(col) < 0;\n      });\n      var startRow = isVertical ? this.cellNavigationService.getRowBelow(finalRangeEndRow) : finalRangeStartRow;\n\n      if (startRow) {\n        this.clearCellsInRange(startRow, initialRangeEndRow, columns);\n      }\n\n      return;\n    }\n\n    var withinInitialRange = true;\n    var values = [];\n\n    var resetValues = function () {\n      values.length = 0;\n    };\n\n    var iterateAcrossCells = function (column, columns) {\n      var currentRow = _this.isUp ? initialRangeEndRow : initialRangeStartRow;\n      var finished = false;\n\n      if (isVertical) {\n        withinInitialRange = true;\n        resetValues();\n      }\n\n      var _loop_1 = function () {\n        var rowNode = _this.rowPositionUtils.getRowNode(currentRow);\n\n        if (!rowNode) {\n          return \"break\";\n        }\n\n        if (isVertical && column) {\n          fillValues(values, column, rowNode, function () {\n            return !_this.rowPositionUtils.sameRow(currentRow, _this.isUp ? initialRangeStartRow : initialRangeEndRow);\n          });\n        } else if (columns) {\n          withinInitialRange = true;\n          resetValues();\n\n          ag_grid_community_1._.forEach(columns, function (col) {\n            return fillValues(values, col, rowNode, function () {\n              return _this.isLeft ? col !== initialRange.columns[0] : col !== ag_grid_community_1._.last(initialRange.columns);\n            });\n          });\n        }\n\n        finished = _this.rowPositionUtils.sameRow(currentRow, _this.isUp ? finalRangeStartRow : finalRangeEndRow);\n        currentRow = _this.isUp ? _this.cellNavigationService.getRowAbove(currentRow) : _this.cellNavigationService.getRowBelow(currentRow);\n      };\n\n      while (!finished && currentRow) {\n        var state_1 = _loop_1();\n\n        if (state_1 === \"break\") break;\n      }\n    };\n\n    var fillValues = function (values, col, rowNode, updateInitialSet) {\n      var currentValue;\n\n      if (withinInitialRange) {\n        currentValue = _this.valueService.getValue(col, rowNode);\n        withinInitialRange = updateInitialSet();\n      } else {\n        currentValue = _this.processValues(values, altKey);\n\n        _this.valueService.setValue(rowNode, col, currentValue);\n      }\n\n      values.push(currentValue);\n    };\n\n    if (isVertical) {\n      initialRange.columns.forEach(function (col) {\n        iterateAcrossCells(col);\n      });\n    } else {\n      var columns = this.isLeft ? finalRange.columns.slice().reverse() : finalRange.columns;\n      iterateAcrossCells(undefined, columns);\n    }\n  };\n\n  FillHandle.prototype.clearCellsInRange = function (startRow, endRow, columns) {\n    var _this = this;\n\n    var currentRow = startRow;\n    var finished = false;\n\n    var _loop_2 = function () {\n      var rowNode = this_1.rowPositionUtils.getRowNode(currentRow); // should never happen, defensive programming\n\n      if (!rowNode) {\n        return \"break\";\n      }\n\n      columns.forEach(function (col) {\n        _this.valueService.setValue(rowNode, col, null);\n      });\n      finished = this_1.rowPositionUtils.sameRow(currentRow, endRow);\n      currentRow = this_1.cellNavigationService.getRowBelow(currentRow);\n    };\n\n    var this_1 = this;\n\n    while (!finished && currentRow) {\n      var state_2 = _loop_2();\n\n      if (state_2 === \"break\") break;\n    }\n  };\n\n  FillHandle.prototype.processValues = function (values, altKey) {\n    return 10;\n  };\n\n  FillHandle.prototype.clearValues = function () {\n    this.clearMarkedPath();\n    this.clearCellValues();\n    this.lastCellMarked = undefined;\n\n    _super.prototype.clearValues.call(this);\n  };\n\n  FillHandle.prototype.clearMarkedPath = function () {\n    this.markedCellComps.forEach(function (cellComp) {\n      var eGui = cellComp.getGui();\n\n      ag_grid_community_1._.removeCssClass(eGui, 'ag-selection-fill-top');\n\n      ag_grid_community_1._.removeCssClass(eGui, 'ag-selection-fill-right');\n\n      ag_grid_community_1._.removeCssClass(eGui, 'ag-selection-fill-bottom');\n\n      ag_grid_community_1._.removeCssClass(eGui, 'ag-selection-fill-left');\n    });\n    this.markedCellComps.length = 0;\n    this.isUp = false;\n    this.isLeft = false;\n    this.isReduce = false;\n  };\n\n  FillHandle.prototype.clearCellValues = function () {\n    this.cellValues.length = 0;\n  };\n\n  FillHandle.prototype.markPathFrom = function (initialPosition, currentPosition) {\n    this.clearMarkedPath();\n    this.clearCellValues();\n\n    if (this.dragAxis === 'y') {\n      if (this.rowPositionUtils.sameRow(currentPosition, initialPosition)) {\n        return;\n      }\n\n      var isBefore = this.rowPositionUtils.before(currentPosition, initialPosition);\n      var rangeStartRow = this.getRangeStartRow();\n      var rangeEndRow = this.getRangeEndRow();\n\n      if (isBefore && (currentPosition.rowPinned == rangeStartRow.rowPinned && currentPosition.rowIndex >= rangeStartRow.rowIndex || rangeStartRow.rowPinned != rangeEndRow.rowPinned && currentPosition.rowPinned == rangeEndRow.rowPinned && currentPosition.rowIndex <= rangeEndRow.rowIndex)) {\n        this.reduceVertical(initialPosition, currentPosition);\n        this.isReduce = true;\n      } else {\n        this.extendVertical(initialPosition, currentPosition, isBefore);\n        this.isReduce = false;\n      }\n    } else {\n      var initialColumn = initialPosition.column;\n      var currentColumn = currentPosition.column;\n\n      if (initialColumn === currentColumn) {\n        return;\n      }\n\n      var displayedColumns = this.columnController.getAllDisplayedColumns();\n      var initialIndex = displayedColumns.indexOf(initialColumn);\n      var currentIndex = displayedColumns.indexOf(currentColumn);\n\n      if (currentIndex <= initialIndex && currentIndex >= displayedColumns.indexOf(this.getCellRange().columns[0])) {\n        this.reduceHorizontal(initialPosition, currentPosition);\n        this.isReduce = true;\n      } else {\n        this.extendHorizontal(initialPosition, currentPosition, currentIndex < initialIndex);\n        this.isReduce = false;\n      }\n    }\n  };\n\n  FillHandle.prototype.extendVertical = function (initialPosition, endPosition, isMovingUp) {\n    var _a = this,\n        rowRenderer = _a.rowRenderer,\n        rangeController = _a.rangeController;\n\n    var row = initialPosition;\n\n    do {\n      var cellRange = this.getCellRange();\n      var colLen = cellRange.columns.length;\n\n      for (var i = 0; i < colLen; i++) {\n        var column = cellRange.columns[i];\n        var rowPos = {\n          rowIndex: row.rowIndex,\n          rowPinned: row.rowPinned\n        };\n\n        var cellPos = __assign({}, rowPos, {\n          column: column\n        });\n\n        var cellInRange = rangeController.isCellInSpecificRange(cellPos, cellRange);\n        var isInitialRow = this.rowPositionUtils.sameRow(row, initialPosition);\n\n        if (isMovingUp) {\n          this.isUp = true;\n        }\n\n        if (!isInitialRow) {\n          var cellComp = rowRenderer.getComponentForCell(cellPos);\n\n          if (cellComp) {\n            this.markedCellComps.push(cellComp);\n            var eGui = cellComp.getGui();\n\n            if (!cellInRange) {\n              ag_grid_community_1._.addOrRemoveCssClass(eGui, 'ag-selection-fill-left', i === 0);\n\n              ag_grid_community_1._.addOrRemoveCssClass(eGui, 'ag-selection-fill-right', i === colLen - 1);\n            }\n\n            ag_grid_community_1._.addOrRemoveCssClass(eGui, isMovingUp ? 'ag-selection-fill-top' : 'ag-selection-fill-bottom', this.rowPositionUtils.sameRow(row, endPosition));\n          }\n        }\n      }\n\n      if (this.rowPositionUtils.sameRow(row, endPosition)) {\n        break;\n      }\n    } while (row = isMovingUp ? this.cellNavigationService.getRowAbove(row) : this.cellNavigationService.getRowBelow(row));\n  };\n\n  FillHandle.prototype.reduceVertical = function (initialPosition, endPosition) {\n    var row = initialPosition;\n\n    do {\n      var cellRange = this.getCellRange();\n      var colLen = cellRange.columns.length;\n      var isLastRow = this.rowPositionUtils.sameRow(row, endPosition);\n\n      for (var i = 0; i < colLen; i++) {\n        var rowPos = {\n          rowIndex: row.rowIndex,\n          rowPinned: row.rowPinned\n        };\n\n        var celPos = __assign({}, rowPos, {\n          column: cellRange.columns[i]\n        });\n\n        var cellComp = this.rowRenderer.getComponentForCell(celPos);\n\n        if (cellComp) {\n          this.markedCellComps.push(cellComp);\n          var eGui = cellComp.getGui();\n\n          ag_grid_community_1._.addOrRemoveCssClass(eGui, 'ag-selection-fill-bottom', this.rowPositionUtils.sameRow(row, endPosition));\n        }\n      }\n\n      if (isLastRow) {\n        break;\n      }\n    } while (row = this.cellNavigationService.getRowAbove(row));\n  };\n\n  FillHandle.prototype.extendHorizontal = function (initialPosition, endPosition, isMovingLeft) {\n    var _this = this;\n\n    var allCols = this.columnController.getAllDisplayedColumns();\n    var startCol = allCols.indexOf(isMovingLeft ? endPosition.column : initialPosition.column);\n    var endCol = allCols.indexOf(isMovingLeft ? this.getCellRange().columns[0] : endPosition.column);\n    var offset = isMovingLeft ? 0 : 1;\n    var colsToMark = allCols.slice(startCol + offset, endCol + offset);\n    var rangeStartRow = this.getRangeStartRow();\n    var rangeEndRow = this.getRangeEndRow();\n    colsToMark.forEach(function (column) {\n      var row = rangeStartRow;\n      var isLastRow = false;\n\n      do {\n        isLastRow = _this.rowPositionUtils.sameRow(row, rangeEndRow);\n\n        var cellComp = _this.rowRenderer.getComponentForCell({\n          rowIndex: row.rowIndex,\n          rowPinned: row.rowPinned,\n          column: column\n        });\n\n        if (cellComp) {\n          _this.markedCellComps.push(cellComp);\n\n          var eGui = cellComp.getGui();\n\n          ag_grid_community_1._.addOrRemoveCssClass(eGui, 'ag-selection-fill-top', _this.rowPositionUtils.sameRow(row, rangeStartRow));\n\n          ag_grid_community_1._.addOrRemoveCssClass(eGui, 'ag-selection-fill-bottom', _this.rowPositionUtils.sameRow(row, rangeEndRow));\n\n          if (isMovingLeft) {\n            _this.isLeft = true;\n\n            ag_grid_community_1._.addOrRemoveCssClass(eGui, 'ag-selection-fill-left', column === colsToMark[0]);\n          } else {\n            ag_grid_community_1._.addOrRemoveCssClass(eGui, 'ag-selection-fill-right', column === ag_grid_community_1._.last(colsToMark));\n          }\n        }\n\n        row = _this.cellNavigationService.getRowBelow(row);\n      } while (!isLastRow);\n    });\n  };\n\n  FillHandle.prototype.reduceHorizontal = function (initialPosition, endPosition) {\n    var _this = this;\n\n    var allCols = this.columnController.getAllDisplayedColumns();\n    var startCol = allCols.indexOf(endPosition.column);\n    var endCol = allCols.indexOf(initialPosition.column);\n    var colsToMark = allCols.slice(startCol, endCol);\n    var rangeStartRow = this.getRangeStartRow();\n    var rangeEndRow = this.getRangeEndRow();\n    colsToMark.forEach(function (column) {\n      var row = rangeStartRow;\n      var isLastRow = false;\n\n      do {\n        isLastRow = _this.rowPositionUtils.sameRow(row, rangeEndRow);\n\n        var cellComp = _this.rowRenderer.getComponentForCell({\n          rowIndex: row.rowIndex,\n          rowPinned: row.rowPinned,\n          column: column\n        });\n\n        if (cellComp) {\n          _this.markedCellComps.push(cellComp);\n\n          var eGui = cellComp.getGui();\n\n          ag_grid_community_1._.addOrRemoveCssClass(eGui, 'ag-selection-fill-right', column === colsToMark[0]);\n        }\n\n        row = _this.cellNavigationService.getRowBelow(row);\n      } while (!isLastRow);\n    });\n  };\n\n  FillHandle.prototype.refresh = function (cellComp) {\n    var cellRange = this.rangeController.getCellRanges()[0];\n    var isColumnRange = !cellRange.startRow || !cellRange.endRow;\n\n    if (isColumnRange) {\n      this.destroy();\n      return;\n    }\n\n    _super.prototype.refresh.call(this, cellComp);\n  };\n\n  FillHandle.TEMPLATE = '<div class=\"ag-fill-handle\"></div>';\n\n  __decorate([ag_grid_community_1.Autowired('valueService'), __metadata(\"design:type\", ag_grid_community_1.ValueService)], FillHandle.prototype, \"valueService\", void 0);\n\n  return FillHandle;\n}(abstractSelectionHandle_1.AbstractSelectionHandle);\n\nexports.FillHandle = FillHandle;","map":null,"metadata":{},"sourceType":"script"}